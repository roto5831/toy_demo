// Generated by Apple Swift version 4.0.2 effective-3.2.2 (swiftlang-900.0.69.2 clang-900.0.38)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import AVFoundation;
@import RealmSwift;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
@import Foundation;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("TIGPlayer")




@class RLMRealm;
@class RLMObjectSchema;
@class RLMSchema;

/// 現在再生されているコンテンツを永続化
SWIFT_CLASS("_TtC9TIGPlayer14CurrentContent")
@interface CurrentContent : RealmSwiftObject
/// primary key
@property (nonatomic, copy) NSString * _Nonnull key;
/// contentsId
@property (nonatomic, copy) NSString * _Nonnull contentsId;
/// contents名
@property (nonatomic, copy) NSString * _Nonnull contentsName;
/// contentsタイトル
@property (nonatomic, copy) NSString * _Nonnull contentsTitle;
/// contents動画URL
@property (nonatomic, copy) NSString * _Nonnull videoUrl;
/// contents動画プレビュー画像
@property (nonatomic, copy) NSString * _Nonnull videoShotPrev;
/// PrimaryKeyの列名
///
/// returns:
/// column name
+ (NSString * _Nullable)primaryKey SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValue:(id _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRealm:(RLMRealm * _Nonnull)realm schema:(RLMObjectSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValue:(id _Nonnull)value schema:(RLMSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
@end


/// TIGオブジェクトアイテム情報を永続化
SWIFT_CLASS("_TtC9TIGPlayer9ItemModel")
@interface ItemModel : RealmSwiftObject
/// primary key
@property (nonatomic, copy) NSString * _Nonnull key;
/// itemId
@property (nonatomic, copy) NSString * _Nonnull itemId;
/// itemId
@property (nonatomic) NSInteger itemIdInt;
/// contentsId
@property (nonatomic, copy) NSString * _Nonnull contentsId;
/// thumbnailURL
@property (nonatomic, copy) NSString * _Nonnull itemThumbnailURL;
/// itemTitle
@property (nonatomic, copy) NSString * _Nonnull itemTitle;
/// wipeモード時に表示されるURL
@property (nonatomic, copy) NSString * _Nonnull itemWebURL;
/// contentsList画面で現在削除対象かどうか
@property (nonatomic) BOOL currentSelectedStateForDelete;
/// stockした時間
@property (nonatomic, copy) NSString * _Nonnull stockTime;
/// PrimaryKeyの列名
///
/// returns:
/// column name
+ (NSString * _Nullable)primaryKey SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValue:(id _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRealm:(RLMRealm * _Nonnull)realm schema:(RLMObjectSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValue:(id _Nonnull)value schema:(RLMSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
@end


/// TIGオブジェクトアイテムリストを永続化
SWIFT_CLASS("_TtC9TIGPlayer5Items")
@interface Items : RealmSwiftObject
/// primary key
@property (nonatomic, copy) NSString * _Nonnull key;
/// contentsId
@property (nonatomic, copy) NSString * _Nonnull contentsId;
/// count
@property (nonatomic, readonly) NSInteger count;
/// itemをlistに挿入
/// \param item item
///
/// \param index index
///
- (void)insert:(ItemModel * _Nonnull)item index:(NSInteger)index;
/// 指定したアイテムのキーのindexを返す
/// \param key item’s key
///
///
/// returns:
/// index
- (NSInteger)indexOfKeyWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// 指定したindexのアイテムを取り除く
/// \param index index
///
- (void)removeWithIndex:(NSInteger)index;
- (ItemModel * _Nonnull)objectAtIndexedSubscript:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// PrimaryKeyの列名
///
/// returns:
/// column name
+ (NSString * _Nullable)primaryKey SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValue:(id _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRealm:(RLMRealm * _Nonnull)realm schema:(RLMObjectSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValue:(id _Nonnull)value schema:(RLMSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
@end


/// 波紋
/// @ACCESS_OPEN
SWIFT_CLASS("_TtC9TIGPlayer6Ripple")
@interface Ripple : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class CAAnimation;

@interface Ripple (SWIFT_EXTENSION(TIGPlayer)) <CAAnimationDelegate>
/// 波紋をよりよくするための、アニメーションの移譲メソッド
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;
@end


/// Log生成者
/// FireBase Document
/// https://firebase.google.com/docs/analytics/ios/start?hl=ja
/// http://dev.classmethod.jp/smartphone/iphone/ios-firebase-analytics-start-entry/
/// @ACCESS_OPEN
SWIFT_CLASS("_TtC9TIGPlayer6TIGLog")
@interface TIGLog : NSObject
/// VerBose
/// \param message LogMessage Only DEBUG
///
/// \param filename File nema  Only DEBUG
///
/// \param line codeLine number  Only DEBUG
///
/// \param function method name  Only DEBUG
///
+ (void)verboseWithMessage:(NSString * _Nonnull)message filename:(NSString * _Nonnull)filename line:(NSInteger)line function:(NSString * _Nonnull)function;
/// Debug
/// \param message LogMessage Only DEBUG
///
/// \param anyObject param  Only DEBUG
///
+ (void)debugWithMessage:(NSString * _Nonnull)message anyObject:(id _Nonnull)anyObject;
/// Info
/// \param message LogMessage DEBUG & RELESS
///
+ (void)infoWithMessage:(NSString * _Nonnull)message;
/// Error
/// \param message LogMessage DEBUG & RELESS
///
/// \param anyObject param Only DEBUG
///
/// \param filename file name Only DEBUG
///
/// \param line codeLine number  Only DEBUG
///
/// \param function method name  Only DEBUG
///
+ (void)errorWithMessage:(NSString * _Nonnull)message anyObject:(id _Nonnull)anyObject filename:(NSString * _Nonnull)filename line:(NSInteger)line function:(NSString * _Nonnull)function;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIWebView;
@class AVAsset;
@class AVAssetImageGenerator;
@class UIView;
@class TIGPlayerWipeContainerRootViewController;

/// TIGPlayer AVPlayerのwrapper
/// @ACCESS_OPEN
SWIFT_CLASS("_TtC9TIGPlayer9TIGPlayer")
@interface TIGPlayer : NSObject <UIWebViewDelegate>
/// アイテムに設定されているURLをロードするWebView
@property (nonatomic, strong) UIWebView * _Nonnull myWebView;
/// 外部での再生を許可するかどうか
@property (nonatomic) BOOL allowsExternalPlayback;
/// 外部再生モードになっているかどうか
@property (nonatomic, readonly) BOOL isExternalPlaybackActive;
/// contentURL
@property (nonatomic, readonly, copy) NSURL * _Nullable contentURL;
/// AVPlayer
@property (nonatomic, readonly, strong) AVPlayer * _Nullable player;
@property (nonatomic, readonly, strong) AVAsset * _Nullable playerasset;
/// AVPlayerItem
/// playerItemが切り替わるたびにObserverを解放して新たにセット
@property (nonatomic, readonly, strong) AVPlayerItem * _Nullable playerItem;
/// ローカル再生動画限定のプレビュー生成者:本仕様上必要ないが、ローカル版動画でプレビューを生成するのに使用可能
@property (nonatomic, readonly, strong) AVAssetImageGenerator * _Nullable imageGenerator;
/// HTTP Live Streaming対応拡張子かどうか
@property (nonatomic, readonly) BOOL isM3U8;
/// TIGPlayerを制御するviewのgetter
/// wide,none mode時はTIGPlayerWideControlView
/// wipe mode時はTIGPlayerWipeView
@property (nonatomic, readonly, strong) UIView * _Nullable controlView;
/// wide mode時のcontrolView
@property (nonatomic, strong) UIView * _Nullable controlViewForWide;
/// wipe mode時のcontrolView
@property (nonatomic, strong) UIView * _Nullable controlViewForWipe;
/// TIGPlayerViewのgetter
@property (nonatomic, readonly, strong) UIView * _Nonnull computedPlayerView;
/// contentView
/// 階層:contentView
/// TIGPlayerView:player&cntrollviewのwrapper
/// webView:wipeモード時のサイトurlをload
@property (nonatomic, weak) UIView * _Nullable contentView;
@property (nonatomic, strong) TIGPlayerWipeContainerRootViewController * _Nullable wipeContainerRootViewController;
/// WipeModeかどうか
@property (nonatomic, readonly) BOOL isDisplayModeWipe;
/// 再生中かどうか
@property (nonatomic, readonly) BOOL isPlaying;
/// Video再生速度
@property (nonatomic) float rate;
/// モードの設定
/// <ul>
///   <li>
///     close: 0
///   </li>
///   <li>
///     blink: 1
///   </li>
///   <li>
///     open: 2
///   </li>
/// </ul>
@property (nonatomic) NSInteger tigMode;
/// モード切替の表示
@property (nonatomic) BOOL showModeView;
/// Shareボタンの表示
@property (nonatomic) BOOL showShareButton;
/// Wipeの有効・無効
@property (nonatomic) BOOL enableWipe;
/// initializer
/// \param contentsId contentsId
///
- (nonnull instancetype)initWithContentsId:(NSString * _Nullable)contentsId OBJC_DESIGNATED_INITIALIZER;
/// initializer
/// \param controlView controlView
///
/// \param contentsId contentsId
///
- (nonnull instancetype)initWithControlView:(UIView * _Nullable)controlView contentsId:(NSString * _Nullable)contentsId OBJC_DESIGNATED_INITIALIZER;
/// TIGPlayer再生
/// 　TIGPlayerView,WebViewはここでcontentViewのsubViewに追加
/// \param url 動画のurl
///
/// \param contentView contentView
///
/// \param title title
///
- (void)playWithURL:(NSURL * _Nonnull)url contentView:(UIView * _Nullable)contentView title:(NSString * _Nullable)title;
/// 再生動画切り替え　※未使用
/// 　今後の仕様で動画を再生中に別動画に切替えたいなどがあった場合に残しておく
/// \param url 動画のurl
///
/// \param title title
///
- (void)replaceToPlayWithURL:(NSURL * _Nonnull)url title:(NSString * _Nullable)title;
/// 状態を再生に切り替える
- (void)play;
/// 状態をポーズに切り替える
- (void)pause;
/// 状態を停止に切り替える
- (void)stop;
/// 停止&解放
- (void)stopAndRelease;
/// 手動解放
- (void)freeWhenRetuningToMenu;
/// playerの再生時間を移動
/// \param time 移動後の時間
///
/// \param completionHandler seek後の処理
///
- (void)seekTo:(NSTimeInterval)time completionHandler:(void (^ _Nullable)(BOOL))completionHandler;
/// Wide modeに変更
/// \param animated aniamtionするかどうか
///
/// \param completion completion handller
///
- (void)toWideWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(BOOL))completion;
/// Wipe modeに変更
/// \param animated aniamtionするかどうか
///
/// \param completion completion handller
///
- (void)toWipeWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(BOOL))completion;
/// 画面上に表示されている動画のサイズと座標
///
/// returns:
/// videoRect
- (CGRect)getVideoRectangle SWIFT_WARN_UNUSED_RESULT;
/// 実際の動画サイズ
///
/// returns:
/// CGSize
- (CGSize)getPresentationVideoSize SWIFT_WARN_UNUSED_RESULT;
/// 妥当な動画サイズかどうか
@property (nonatomic, readonly) BOOL isValidPresentationVideoSize;
/// 縦用動画
///
/// returns:
/// return value description
@property (nonatomic, readonly) BOOL isVideoForLandscape;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface TIGPlayer (SWIFT_EXTENSION(TIGPlayer))
/// AVPlayerItemに登録したkeyの変化を監視
/// \param keyPath keyPath
///
/// \param object AVPlayerItem
///
/// \param change change
///
/// \param context context
///
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end





@class NSCoder;

/// 再生、一時停止ボタン
/// @ACCESS_OPEN
SWIFT_CLASS("_TtC9TIGPlayer22TIGPlayerControlButton")
@interface TIGPlayerControlButton : UIButton
/// initializer
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// 背景画像を一時停止にする
- (void)setBackGroundToStop;
/// 背景画像を再生にする
- (void)setBackGroundToPlay;
/// 再生、一時停止を切り替える
- (void)respondToButton;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end




/// 進むボタン
/// @ACCESS_OPEN
SWIFT_CLASS("_TtC9TIGPlayer22TIGPlayerForwardButton")
@interface TIGPlayerForwardButton : UIButton
/// initializer
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// 10秒進む
- (void)respondToButton;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class NSTimer;

/// ローディング
/// @ACCESS_OPEN
SWIFT_CLASS("_TtC9TIGPlayer16TIGPlayerLoading")
@interface TIGPlayerLoading : UIView
/// ローディングタイマー
@property (nonatomic, strong) NSTimer * _Nullable timer;
/// itializer
/// \param frame frame
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// itializer
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// awakeFromNib
- (void)awakeFromNib;
/// 円の軌道を作成
- (void)layoutSubviews;
/// ローディング開始
- (void)start;
/// ローディング終了
- (void)stop;
/// 親フレームにセンタリング
/// \param parentFrame parentFrame
///
- (void)centeringInParentFrame:(CGRect)parentFrame;
@end




/// メニューボタン
/// @ACCESS_OPEN
SWIFT_CLASS("_TtC9TIGPlayer19TIGPlayerMenuButton")
@interface TIGPlayerMenuButton : UIButton
/// initializer
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// playerを解放してコンテンツリストに戻る
- (void)respondToButton;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// 再開ボタン
/// @ACCESS_OPEN
SWIFT_CLASS("_TtC9TIGPlayer21TIGPlayerReplayButton")
@interface TIGPlayerReplayButton : UIButton
/// initializer
/// \param frame frame
///
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// initializer
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// 親フレームにセンタリング
/// \param parentFrame parentFrame
///
- (void)centeringInParentFrame:(CGRect)parentFrame;
@end




/// 巻き戻しボタン
/// @ACCESS_OPEN
SWIFT_CLASS("_TtC9TIGPlayer21TIGPlayerRewindButton")
@interface TIGPlayerRewindButton : UIButton
/// initializer
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// 10秒巻き戻し
- (void)respondToButton;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC9TIGPlayer19TIGPlayerTitleLabel")
@interface TIGPlayerTitleLabel : UILabel
/// initializer
/// \param frame frame
///
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// initializer
/// initializer
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// wide mode時にTIGPlayerを制御する
/// @ACCESS_OPEN
SWIFT_CLASS("_TtC9TIGPlayer24TIGPlayerWideControlView")
@interface TIGPlayerWideControlView : UIView
/// TIGPlayer
@property (nonatomic, weak) TIGPlayer * _Nullable player;
/// モード切替の表示
@property (nonatomic) BOOL showModeView;
/// Shareボタンの表示
@property (nonatomic) BOOL showShareButton;
/// Wipeの有効・無効
@property (nonatomic) BOOL enableWipe;
/// モードの設定
/// <ul>
///   <li>
///     close: 0
///   </li>
///   <li>
///     blink: 1
///   </li>
/// </ul>
@property (nonatomic) NSInteger tigMode;
/// initializer from Nib
- (void)awakeFromNib;
/// videoshotPreviewにtouchSeekbarメソッドの処理を委譲
/// \param ishiden videoshotPreview表示、非表示
///
- (void)touchSeekbarWithIshiden:(BOOL)ishiden;
/// 端末の回転等でサブビューのFrameが変更された場合、ここで調整
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end





@class UIGestureRecognizer;

@interface TIGPlayerWideControlView (SWIFT_EXTENSION(TIGPlayer)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end





@class UISlider;

@interface TIGPlayerWideControlView (SWIFT_EXTENSION(TIGPlayer))
/// Time Sliderタッチ開始した際にProgressSliderがSlidingしているとみなす
/// \param player TIGPlayer
///
/// \param value timeSlider.value
///
- (void)player:(TIGPlayer * _Nonnull)player progressWillChange:(NSTimeInterval)value;
/// Time Sliderが変化した際にSliderの時間と時間のラベルを変更
/// \param player TIGPlayer
///
/// \param value timeSlider.value
///
- (void)player:(TIGPlayer * _Nonnull)player progressChanging:(NSTimeInterval)value;
/// Time Sliderのタッチが終了した際にcurrentTimeを更新しTIGPlayerの時間を更新かつProgressSliderのSlidingが終了したとみなす
/// \param player TIGPlayer
///
/// \param value timeSlider.value
///
- (void)player:(TIGPlayer * _Nonnull)player progressDidChange:(NSTimeInterval)value;
/// Time Sliderが最後に到達したかどうか
/// \param slider slider
///
///
/// returns:
/// maximumProgress == currentProgress
- (BOOL)didProgressGetToEndWithSlider:(UISlider * _Nonnull)slider SWIFT_WARN_UNUSED_RESULT;
/// playerのbufferDurationが変化した際に呼ばれる。progressViewの値を変更する
/// \param player TIGPlayer
///
/// \param bufferDuration bufferDuration
///
/// \param totalDuration totalDuration
///
- (void)player:(TIGPlayer * _Nonnull)player bufferDurationDidChange:(NSTimeInterval)bufferDuration totalDuration:(NSTimeInterval)totalDuration;
/// playerのcurrentTimeが0.1毎に更新され、その際に呼ばれる。timeSliderの値とplayerの時間の同期を取る
/// \param player TIGPlayer
///
/// \param currentTime currentTime
///
/// \param duration duration
///
- (void)player:(TIGPlayer * _Nonnull)player currentTime:(NSTimeInterval)currentTime duration:(NSTimeInterval)duration;
/// loading表示
/// \param player TIGPlayer
///
/// \param showLoading showLoading
///
- (void)player:(TIGPlayer * _Nonnull)player showLoading:(BOOL)showLoading;
@end

@class NSBundle;

/// Wipe mode時の制御者
/// 階層
/// TIGPlayerWipeContainerRootViewController
/// TIGPlayerWipeContainer
/// wipeWindow ※UIWindow
/// TIGPlayerView:cotroller.view.subview
/// controlView == TIGPlayerWipeView
/// @ACCESS_OPEN
SWIFT_CLASS("_TtC9TIGPlayer40TIGPlayerWipeContainerRootViewController")
@interface TIGPlayerWipeContainerRootViewController : UIViewController
/// viewDidLoad
- (void)viewDidLoad;
/// viewDidLoad
- (void)didReceiveMemoryWarning;
/// 自動で回転すべきか
@property (nonatomic, readonly) BOOL shouldAutorotate;
/// 対応している端末の向き
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
/// status bar 非表示
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
/// videoView追加
/// \param view TIGPlayerView
///
- (void)addVideoView:(UIView * _Nonnull)view;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// wipe mode時に表示されるview
/// @ACCESS_OPEN
SWIFT_CLASS("_TtC9TIGPlayer17TIGPlayerWipeView")
@interface TIGPlayerWipeView : UIView
/// TIGPlayer
@property (nonatomic, weak) TIGPlayer * _Nullable player;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// TIGPlayerWipeWindow
/// @ACCESS_OPEN
SWIFT_CLASS("_TtC9TIGPlayer19TIGPlayerWipeWindow")
@interface TIGPlayerWipeWindow : UIWindow
/// 端末回転時等にFrameの再計算
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSTimer (SWIFT_EXTENSION(TIGPlayer))
/// 指定した時間間隔でタイマー生成
/// \param timeInterval timeInterval
///
/// \param block block
///
/// \param repeats repeats
///
///
/// returns:
/// Timer
+ (NSTimer * _Nonnull)timerWithTimeInterval:(NSTimeInterval)timeInterval block:(SWIFT_NOESCAPE void (^ _Nonnull)(void))block repeats:(BOOL)repeats SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
